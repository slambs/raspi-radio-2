{"ast":null,"code":"var sensor = require(\"../build/Release/node_dht_sensor\");\n\nvar promises = {\n  initialize: sensor.initialize,\n  setMaxRetries: sensor.setMaxRetries,\n\n  readSync(type, pin) {\n    return sensor.read(type, pin);\n  },\n\n  read(type, pin) {\n    return new Promise(function (resolve, reject) {\n      sensor.read(type, pin, function (err, temperature, humidity) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({\n            temperature,\n            humidity\n          });\n        }\n      });\n    });\n  }\n\n};\nmodule.exports = {\n  initialize: sensor.initialize,\n  read: sensor.read,\n  setMaxRetries: sensor.setMaxRetries,\n  promises\n};","map":{"version":3,"sources":["/Users/vasse/Documents/code/js/raspiRadio2/raspi-radio-2/node_modules/node-dht-sensor/lib/index.js"],"names":["sensor","require","promises","initialize","setMaxRetries","readSync","type","pin","read","Promise","resolve","reject","err","temperature","humidity","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kCAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,UAAU,EAAEH,MAAM,CAACG,UADN;AAEbC,EAAAA,aAAa,EAAEJ,MAAM,CAACI,aAFT;;AAGbC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,GAAP,EAAY;AAClB,WAAOP,MAAM,CAACQ,IAAP,CAAYF,IAAZ,EAAkBC,GAAlB,CAAP;AACD,GALY;;AAMbC,EAAAA,IAAI,CAACF,IAAD,EAAOC,GAAP,EAAY;AACd,WAAO,IAAIE,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CX,MAAAA,MAAM,CAACQ,IAAP,CAAYF,IAAZ,EAAkBC,GAAlB,EAAuB,UAASK,GAAT,EAAcC,WAAd,EAA2BC,QAA3B,EAAqC;AAC1D,YAAIF,GAAJ,EAAS;AACPD,UAAAA,MAAM,CAACC,GAAD,CAAN;AACD,SAFD,MAEO;AACLF,UAAAA,OAAO,CAAC;AAAEG,YAAAA,WAAF;AAAeC,YAAAA;AAAf,WAAD,CAAP;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAhBY,CAAf;AAmBAC,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,UAAU,EAAEH,MAAM,CAACG,UADJ;AAEfK,EAAAA,IAAI,EAAER,MAAM,CAACQ,IAFE;AAGfJ,EAAAA,aAAa,EAAEJ,MAAM,CAACI,aAHP;AAIfF,EAAAA;AAJe,CAAjB","sourcesContent":["var sensor = require(\"../build/Release/node_dht_sensor\");\n\nvar promises = {\n  initialize: sensor.initialize,\n  setMaxRetries: sensor.setMaxRetries,\n  readSync(type, pin) {\n    return sensor.read(type, pin);\n  },\n  read(type, pin) {\n    return new Promise(function(resolve, reject) {\n      sensor.read(type, pin, function(err, temperature, humidity) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ temperature, humidity });\n        }\n      });\n    });\n  }\n};\n\nmodule.exports = {\n  initialize: sensor.initialize,\n  read: sensor.read,\n  setMaxRetries: sensor.setMaxRetries,\n  promises\n};\n"]},"metadata":{},"sourceType":"script"}